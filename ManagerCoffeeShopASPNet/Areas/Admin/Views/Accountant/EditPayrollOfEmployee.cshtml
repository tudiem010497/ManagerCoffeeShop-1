@model ManagerCoffeeShopASPNet.Payroll
@using ManagerCoffeeShopASPNet.Enum

@{
    ViewBag.Title = "EditPayrollOfEmployee";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}
<script src="~/Assets/Admin/js/accountant.js"></script>
<br />
<h2 style="text-align:center">CHỈNH SỬA BẢNG LƯƠNG CỦA NHÂN VIÊN</h2>
@if (TempData["edit"] != null)
{
    <div class="alert alert-success col-md-10" role="alert">
        @TempData["edit"]
    </div>
}
@using (Html.BeginForm("DoEditPayrollOfEmployee", "Accountant", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PayrollID)

        <div class="form-group">
            @Html.Label("Mã nhân viên", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Tên nhân viên", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Lương cơ bản", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BasicSalary, new { htmlAttributes = new { @class = "form-control", @readonly = "true", id = "BasicSalary" } })
                @Html.ValidationMessageFor(model => model.BasicSalary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Đơn vị tính", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" value="@ViewData["SalaryType"]" class="form-control" id="SalaryType" readonly />
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Số ngày/giờ làm việc", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WorkDay, new { htmlAttributes = new { @class = "form-control", id = "WorkDay" } })
                @Html.ValidationMessageFor(model => model.WorkDay, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Tiền thưởng", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bonus, new { htmlAttributes = new { @class = "form-control", id = "Bonus" } })
                @Html.ValidationMessageFor(model => model.Bonus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Tiền phạt", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Penalty, new { htmlAttributes = new { @class = "form-control", id = "Penalty" } })
                @Html.ValidationMessageFor(model => model.Penalty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Đơn vị tiền", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Currency, new SelectList(Enum.GetValues(typeof(EnumUtilities.Currency))), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Ghi chú", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Desc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Desc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Ngày tạo bảng lương", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddedOn, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group ">
        @Html.Label("Tổng cộng", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="row col-md-10">
            <div class="col-md-7" id="sum">
                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control totalEdit", id = "Total", @readonly = "true" } })
            </div>
            <div class="col-md-5">
                <button type="button" class="btn btn-sm btn-outline-success preCreatePayroll">Tính tổng</button>
            </div>
        </div>
    </div>
    <div>
        <div class="form-group row">
            <div class="col-md-8">
                @Html.ActionLink("Trở về", "DetailPayrollOfEmployee")
            </div>
            <div class=" col-md-4">
                <input type="submit" value="Lưu" class="btn btn-outline-primary" />
            </div>
            
        </div>
    </div>
}
